name: aws-guardduty
pipeline:
  - name: json_event
    external:
      name: json.parse-json
  - name: parsed_date
    external:
      name: date.parse
      properties:
        input_field: '{{json_event.message.updatedAt}}'
        output_field: datetime
  - name: parsed_finding
    external:
      name: grok.match
      properties:
        input_field: json_event.message.type
        output_field: finding
        pattern: '%{DATA:threat_purpose}:%{DATA:affected_resource_type}/%{DATA:threat_family_name}(.%{DATA:detection_mecanism})?(!%{DATA:artifact})?'
  - name: set_fields
  - name: set_finding_fields



stages:
  set_fields:
    actions:
      - set:
          '@timestamp': '{{parsed_date.datetime}}'
          event.action: '{{parsed_finding.finding.threat_purpose}}'
          event.kind: 'alert'
          event.severity: '{{json_event.message.severity}}'
          cloud.account.id: '{{json_event.message.accountId}}'
          cloud.region: '{{json_event.message.region}}'
          cloud.provider: '{{json_event.message.partition}}'
          agent.version: '{{json_event.message.schemaVersion}}'
          service.name: '{{json_event.message.service.service.name}}'
          user.name: '{{json_event.message.resource.accessKeyDetails.userName or json_event.message.resource.rdsDbUserDetails.user or json_event.message.resource.kubernetesDetails.kubernetesUserDetails.username}}' #to modify, does not work for all findings format
      - set:
          user.group.name: '{{json_event.message.resource.kubernetesDetails.kubernetesUserDetails.groups}}'
        filter: '{{json_event.message.resource.get("kubernetesDetails") != None}}'
      - set:
          source.ip: '{{json_event.message.service.action.networkConnectionAction.remoteIpDetails.ipAddressV4 or json_event.message.service.action.awsApiCallAction.remoteIpDetails.ipAddressV4 or json_event.message.service.action.kubernetesApiCallAction.remoteIpDetails.ipAddressV4}}'
      - set:
          destination.ip: '{{json_event.message.service.action.networkConnectionAction.localIpDetails.ipAddressV4}}'
        filter: '{{json_event.message.service.action.get("networkConnectionAction") != None}}'
      - set:
          threat.indicator.description: '{{json_event.message.description}}'
          threat.enrichments.indicator.first_seen: '{{json_event.message.service.eventFirstSeen}}'
          threat.enrichments.indicator.last_seen: '{{json_event.message.service.eventLastSeen}}'
          threat.enrichments.indicator.sightings: '{{json_event.message.service.count}}'

  set_finding_fields:
    actions:
      - set:
          aws.guardduty.finding.id: '{{json_event.message.id}}'
          aws.guardduty.finding.type: '{{json_event.message.type}}'
          aws.guardduty.finding.region: '{{json_event.message.region}}'
          aws.guardduty.finding.resource.type: '{{json_event.message.resource.resourceType}}'
      - set:
          aws.guardduty.finding.principal.id: '{{json_event.message.resource.accessKeyDetails.principalId}}'
        filter: '{{json_event.message.resource.get("accessKeyDetails") != None}}'
      - set:
          aws.guardduty.finding.instance.id: '{{json_event.message.resource.instanceDetails.instanceId}}'
          aws.guardduty.finding.instance.type: '{{json_event.message.resource.instanceDetails.instanceType}}'
          aws.guardduty.finding.instance.platform: '{{json_event.message.resource.instanceDetails.platform}}'
          aws.guardduty.finding.instance.product_code: '{{json_event.message.resource.instanceDetails.productCodes}}'
          aws.guardduty.finding.instance.outpost.arn: '{{json_event.message.resource.instanceDetails.outpostArn}}'
          aws.guardduty.finding.instance.state: '{{json_event.message.resource.instanceDetails.instanceState}}'
          aws.guardduty.finding.instance.iam.profile: '{{json_event.message.resource.instanceDetails.iamInstanceProfile}}'
        filter: '{{json_event.message.resource.get("instanceDetails") != None}}'
      - set:
          aws.guardduty.finding.accesskey.id: '{{json_event.message.resource.accessKeyDetails.accessKeyId}}'
          aws.guardduty.finding.accesskey.user_type: '{{json_event.message.resource.accessKeyDetails.userType}}'
        filter: '{{json_event.message.resource.get("accessKeyDetails") != None}}'         
      - set:
          container.id: '{{json_event.message.resource.containerDetails.id}}'
          container.name: '{{json_event.message.resource.containerDetails.name}}'
          container.image.name: '{{json_event.message.resource.containerDetails.image}}'
        filter: '{{json_event.message.resource.get("containerDetails") != None}}'
      - set:
          aws.guardduty.finding.rdsdb.id: '{{json_event.message.resource.rdsDbInstanceDetails.dbInstanceIdentifier}}'
          aws.guardduty.finding.rdsdb.engine.name: '{{json_event.message.resource.rdsDbInstanceDetails.engine}}'
          aws.guardduty.finding.rdsdb.engine.version: '{{json_event.message.resource.rdsDbInstanceDetails.engineVersion}}'
          aws.guardduty.finding.rdsdb.cluster.identifier: '{{json_event.message.resource.rdsDbInstanceDetails.dbClusterIdentifier}}'
          aws.guardduty.finding.rdsdb.instance.arn: '{{json_event.message.resource.rdsDbInstanceDetails.dbInstanceArn}}'
        filter: '{{json_event.message.resource.get("rdsDbInstanceDetails") != None}}'        
      - set:
          aws.guardduty.finding.rdsdb.user.application: '{{json_event.message.resource.rdsDbUserDetails.application}}'
          aws.guardduty.finding.rdsdb.user.database: '{{json_event.message.resource.rdsDbUserDetails.database}}'
          aws.guardduty.finding.rdsdb.user.ssl: '{{json_event.message.resource.rdsDbUserDetails.ssl}}'
          aws.guardduty.finding.rdsdb.user.auth_method: '{{json_event.message.resource.rdsDbUserDetails.authMethod}}'
        filter: '{{json_event.message.resource.get("rdsDbUserDetails") != None}}'
      - set:
          aws.guardduty.finding.eks.id: '{{json_event.message.resource.eksClusterDetails.name}}'
          aws.guardduty.finding.eks.arn: '{{json_event.message.resource.eksClusterDetails.arn}}'
          aws.guardduty.finding.eks.created_at: '{{json_event.message.resource.eksClusterDetails.createdAt}}'
          aws.guardduty.finding.eks.vpc.id: '{{json_event.message.resource.eksClusterDetails.vpcId}}'
          aws.guardduty.finding.eks.status: '{{json_event.message.resource.eksClusterDetails.status}}'
        filter: '{{json_event.message.resource.get("eksClusterDetails") != None}}'   
      - set:
          aws.guardduty.finding.eks.user.uid: '{{json_event.message.resource.kubernetesDetails.kubernetesUserDetails.uid}}'   
        filter: '{{json_event.message.resource.get("kubernetesDetails") != None}}'    
      - set:
          aws.guardduty.finding.ecs.arn: '{{json_event.message.resource.ecsClusterDetails.arn}}'
          aws.guardduty.finding.ecs.name: '{{json_event.message.resource.ecsClusterDetails.name}}'
          aws.guardduty.finding.ecs.status: '{{json_event.message.resource.ecsClusterDetails.status}}'
          aws.guardduty.finding.ecs.task.arn: '{{json_event.message.resource.ecsClusterDetails.taskDetails.arn}}'
          aws.guardduty.finding.ecs.task.definition_arn: '{{json_event.message.resource.ecsClusterDetails.taskDetails.definitionArn}}'
          aws.guardduty.finding.ecs.task.version: '{{json_event.message.resource.ecsClusterDetails.taskDetails.version}}'
          aws.guardduty.finding.ecs.task.created_at: '{{json_event.message.resource.ecsClusterDetails.taskDetails.createdAt}}'
          aws.guardduty.finding.ecs.task.started_at: '{{json_event.message.resource.ecsClusterDetails.taskDetails.startedAt}}'
          aws.guardduty.finding.ecs.task.started_by: '{{json_event.message.resource.ecsClusterDetails.taskDetails.startedBy}}'
        filter: '{{json_event.message.resource.get("ecsClusterDetails") != None}}' 
      - set:
          aws.guardduty.finding.s3bucket.arn: '{{json_event.message.resource.s3BucketDetails[0].arn}}'
          aws.guardduty.finding.s3bucket.name: '{{json_event.message.resource.s3BucketDetails[0].name}}'
          aws.guardduty.finding.s3bucket.type: '{{json_event.message.resource.s3BucketDetails[0].type}}'
          aws.guardduty.finding.s3bucket.created_at: '{{json_event.message.resource.s3BucketDetails[0].createdAt}}'
          aws.guardduty.finding.s3bucket.owner.id: '{{json_event.message.resource.s3BucketDetails[0].owner.id}}'
        filter: '{{json_event.message.resource.get("s3BucketDetails") != None}}'
      - set:
          aws.guardduty.finding.service.action.type: '{{json_event.message.service.action.actionType}}'
          aws.guardduty.finding.service.resource.role: '{{json_event.message.service.resourceRole}}'
      - set:
          network.direction: '{{json_event.message.service.action.networkConnectionAction.connectionDirection|lower }}'
          source.geo.country_name: '{{json_event.message.service.action.remoteIpDetails.country.countryName}}' #geo fields doesn't work
          source.geo.location: '{{json_event.message.service.action.remoteIpDetails.country.geoLocation}}'
          source.geo.city_name: '{{json_event.message.service.action.remoteIpDetails.city.cityName}}'
          network.transport:  '{{json_event.message.service.action.protocol|lower }}'
          source.port: '{{json_event.message.service.action.remotePortDetails.port}}'
          source.ip: '{{json_event.message.service.action.remoteIpDetails.ipAddressV4}}'
          destination.port: '{{json_event.message.service.action.localPortDetails.port}}'
          destination.ip: '{{json_event.message.service.action.networkConnectionAction.localIpDetails.ipAddressV4}}'
          aws.guardduty.finding.service.action.target.blocked: '{{json_event.message.service.action.networkConnectionAction.blocked}}'
        filter: '{{json_event.message.service.action.actionType == "NETWORK_CONNECTION"}}'
      - set:
          source.geo.country_name: '{{json_event.message.service.action.awsApiCallAction.remoteIpDetails.country.countryName}}'
          source.geo.location: '{{json_event.message.service.action.awsApiCallAction.remoteIpDetails.country.geoLocation}}'
          source.geo.city_name: '{{json_event.message.service.action.awsApiCallAction.remoteIpDetails.city.cityName}}'
          source.ip: '{{json_event.message.service.action.awsApiCallAction.remoteIpDetails.ipAddressV4}}'
          error.code: '{{json_event.message.service.action.awsApiCallAction.errorCode}}'
          service.name: '{{json_event.message.service.action.awsApiCallAction.serviceName}}'
        filter: '{{json_event.message.service.action.actionType == "AWS_API_CALL"}}'
      - set:
          source.geo.country_name: '{{json_event.message.service.action.kubernetesApiCallAction.remoteIpDetails.country.countryName}}'
          source.geo.location: '{{json_event.message.service.action.kubernetesApiCallAction.remoteIpDetails.country.geoLocation}}'
          source.geo.city_name: '{{json_event.message.service.action.kubernetesApiCallAction.remoteIpDetails.city.cityName}}'
          source.ip: '{{json_event.message.service.action.kubernetesApiCallAction.remoteIpDetails.ipAddressV4}}'        
        filter: '{{json_event.message.service.action.actionType == "KUBERNETES_API_CALL"}}'
      - set: #to modify, doesn't work if more than 1 port
          source.geo.country_name: '{{json_event.message.service.action.portProbeAction.portProbeDetails[0].remoteIpDetails.country.countryName}}'
          source.geo.location: '{{json_event.message.service.action.portProbeAction.portProbeDetails[0].remoteIpDetails.geoLocation}}'
          source.geo.city_name: '{{json_event.message.service.action.portProbeAction.portProbeDetails[0].remoteIpDetails.city.cityName}}'
          source.ip: '{{json_event.message.service.action.portProbeAction.portProbeDetails[0].remoteIpDetails.ipAddressV4}}'
          destination.port: '{{json_event.message.service.action.portProbeAction.portProbeDetails[0].localPortDetails.port}}'
          destination.ip: '{{json_event.message.service.action.portProbeAction.portProbeDetails[0].localIpDetails.ipAddressV4}}'
          aws.guardduty.finding.service.action.target.blocked: '{{json_event.message.service.action.portProbeAction.blocked}}'
        filter: '{{json_event.message.service.action.actionType == "PORT_PROBE"}}'
      - set:
          network.protocol: 'dns'
          destination.domain: '{{json_event.message.service.action.dnsRequestAction.domain}}'
          network.transport: '{{json_event.message.service.action.dnsRequestAction.protocol|lower }}'
          aws.guardduty.finding.service.action.target.blocked: '{{json_event.message.service.action.dnsRequestAction.blocked}}'
        filter: '{{json_event.message.service.action.actionType == "DNS_REQUEST"}}'
      - set:
          source.geo.country_name: '{{json_event.message.service.action.rdsLoginAttemptActionremoteIpDetails.country.countryName}}'
          source.geo.location: '{{json_event.message.service.action.rdsLoginAttemptActionremoteIpDetails.geoLocation}}'
          source.geo.city_name: '{{json_event.message.service.action.rdsLoginAttemptActionremoteIpDetails.city.cityName}}'
          source.ip: '{{json_event.message.service.action.rdsLoginAttemptAction.remoteIpDetails.ipAddressV4}}'
        filter: '{{json_event.message.service.action.actionType == "RDS_LOGIN_ATTEMPT"}}'

#tags lists may need to be added to custom fields, check if necessary